CREATE DATABASE db_SQLCaseStudies
USE db_SQLCaseStudies
SELECT * FROM DIM_MANUFACTURER
SELECT * FROM DIM_MODEL
SELECT * FROM DIM_CUSTOMER
SELECT * FROM DIM_LOCATION
SELECT * FROM DIM_DATE
SELECT * FROM FACT_TRANSACTIONS

--Write queries to find out the following:

--1. List all the states in which we have customers who have bought cellphones
--from 2005 till today.
USE db_SQLCaseStudies
SELECT * FROM FACT_TRANSACTIONS
SELECT * FROM DIM_LOCATION

SELECT  T2.STATE, T1.IDCUSTOMER, T1.DATE FROM FACT_TRANSACTIONS T1
FULL JOIN DIM_LOCATION T2 ON T1.IDLOCATION = T2.IDLOCATION
WHERE DATEPART(YEAR, T1.DATE) > '2005'

--2. What state in the US is buying more 'Samsung' cell phones?
USE db_SQLCaseStudies
SELECT * FROM DIM_MODEL
SELECT * FROM FACT_TRANSACTIONS
SELECT * FROM DIM_LOCATION

SELECT TOP 1 SUM(T2.QUANTITY) AS QUANTITY, T1.IDMANUFACTURER AS SAMUSUNG_ID, T3.COUNTRY, T3.STATE FROM DIM_MODEL T1
LEFT JOIN FACT_TRANSACTIONS T2 ON T1.IDModel = T2.IDModel
LEFT JOIN DIM_LOCATION T3 ON T2.IDLocation = T3.IDLocation
WHERE T3.COUNTRY = 'US' AND T1.IDMANUFACTURER = '12'
GROUP BY IDMANUFACTURER, COUNTRY, STATE
ORDER BY QUANTITY DESC

--3. Show the number of transactions for each model per zip code per state.
USE db_SQLCaseStudies
SELECT * FROM DIM_LOCATION
SELECT * FROM FACT_TRANSACTIONS

SELECT T1.IDMODEL, T2.ZIPCODE, T2.STATE, COUNT(T1.IDCUSTOMER) AS NO_OF_TRANSACTION FROM FACT_TRANSACTIONS T1
LEFT JOIN DIM_LOCATION T2 ON T1.IDLOCATION = T2.IDLOCATION
GROUP BY IDMODEL, ZIPCODE, STATE

--4. Show the cheapest cellphone
USE db_SQLCaseStudies
SELECT * FROM DIM_MODEL

SELECT TOP 1 UNIT_PRICE, IDMODEL, MODEL_NAME FROM DIM_MODEL
ORDER BY UNIT_PRICE 

--5. Find out the average price for each model in the top5 manufacturers in
--terms of sales quantity and order by average price.
USE db_SQLCaseStudies
SELECT * FROM DIM_MODEL
SELECT * FROM FACT_TRANSACTIONS

SELECT AVG(T1.UNIT_PRICE) AS AVERAGE_PRICE, T1.IDMODEL, TT.* FROM DIM_MODEL T1
INNER JOIN (SELECT TOP 5 SUM(T1.QUANTITY) AS SALES_QUANTITY, T2.IDMANUFACTURER FROM FACT_TRANSACTIONS T1
LEFT JOIN DIM_MODEL T2 ON T1.IDMODEL = T2.IDMODEL GROUP BY T2.IDMANUFACTURER) TT ON T1.IDMANUFACTURER = TT.IDMANUFACTURER
GROUP BY T1.IDMODEL, TT.IDMANUFACTURER, TT.SALES_QUANTITY
ORDER BY AVG(T1.UNIT_PRICE)

--6. List the names of the customers and the average amount spent in 2009,
--where the average is higher than 500
USE db_SQLCaseStudies
SELECT * FROM DIM_CUSTOMER
SELECT * FROM FACT_TRANSACTIONS

SELECT T1.IDCUSTOMER, T1.CUSTOMER_NAME, AVG(T2.TOTALPRICE) AS AVERAGE_AMOUNT, YEAR(T2.DATE) AS YEAR FROM DIM_CUSTOMER T1
LEFT JOIN FACT_TRANSACTIONS T2 ON T1.IDCUSTOMER = T2.IDCUSTOMER
WHERE YEAR(T2.DATE) = '2009'
GROUP BY T1.IDCUSTOMER, T1.CUSTOMER_NAME, YEAR(T2.DATE)
HAVING  AVG(T2.TOTALPRICE) > '500'

--7. List if there is any model that was in the top 5 in terms of quantity,
--simultaneously in 2008, 2009 and 2010
USE db_SQLCaseStudies
SELECT * FROM FACT_TRANSACTIONS

SELECT * FROM (SELECT TOP 5 T1.IDMODEL,T2.MODEL_NAME from FACT_TRANSACTIONS T1
LEFT JOIN DIM_MODEL T2 on T1.IDMODEL = T2.IDMODEL
LEFT JOIN DIM_MANUFACTURER T3 ON T2.IDMANUFACTURER=T3.IDMANUFACTURER
WHERE YEAR(DATE) ='2008'
GROUP BY T1.IDMODEL, T2.MODEL_NAME
ORDER BY COUNT(T1.QUANTITY) DESC) as TOP5_IN_2008
UNION
SELECT * FROM (SELECT TOP 5 T1.IDMODEL,T2.MODEL_NAME from FACT_TRANSACTIONS T1
LEFT JOIN DIM_MODEL T2 on T1.IDMODEL = T2.IDMODEL
LEFT JOIN DIM_MANUFACTURER T3 ON T2.IDMANUFACTURER=T3.IDMANUFACTURER
WHERE YEAR(DATE) ='2009'
GROUP BY T1.IDMODEL, T2.MODEL_NAME
ORDER BY COUNT(T1.QUANTITY) DESC) as TOP5_IN_2009
UNION
SELECT * FROM (SELECT TOP 5 T1.IDMODEL,T2.MODEL_NAME from FACT_TRANSACTIONS T1
LEFT JOIN DIM_MODEL T2 on T1.IDMODEL = T2.IDMODEL
LEFT JOIN DIM_MANUFACTURER T3 ON T2.IDMANUFACTURER=T3.IDMANUFACTURER
WHERE YEAR(DATE) ='2010'
GROUP BY T1.IDMODEL, T2.MODEL_NAME
ORDER BY COUNT(T1.QUANTITY) DESC) as TOP5_IN_2010

--8. Show the manufacturer with the 2nd top sales in the year of 2009 and the
--manufacturer with the 2nd top sales in the year of 2010.
USE db_SQLCaseStudies
SELECT * FROM DIM_MANUFACTURER
SELECT * FROM DIM_MODEL
SELECT * FROM FACT_TRANSACTIONS

select T.Manufacturer_Name, T.yr from
(select DIM_MANUFACTURER.Manufacturer_Name, year(FACT_TRANSACTIONS.Date) as [yr], sum(FACT_TRANSACTIONS.Quantity) as Sales_Qty,
rank() over(order by sum(FACT_TRANSACTIONS.Quantity) desc) as [rank] from FACT_TRANSACTIONS
left join DIM_MODEL on FACT_TRANSACTIONS.IDModel = DIM_MODEL.IDModel
left join DIM_MANUFACTURER on DIM_MODEL.IDManufacturer = DIM_MANUFACTURER.IDManufacturer
where year(FACT_TRANSACTIONS.Date) = 2009
group by DIM_MANUFACTURER.Manufacturer_Name,year(FACT_TRANSACTIONS.Date))as T
where Rank =2
union
select T.Manufacturer_Name, T.yr from
(select DIM_MANUFACTURER.Manufacturer_Name, year(FACT_TRANSACTIONS.Date) as [yr], sum(FACT_TRANSACTIONS.Quantity) as Sales_Qty,
rank() over(order by sum(FACT_TRANSACTIONS.Quantity) desc) as [rank] from FACT_TRANSACTIONS
left join DIM_MODEL on FACT_TRANSACTIONS.IDModel = DIM_MODEL.IDModel
left join DIM_MANUFACTURER on DIM_MODEL.IDManufacturer = DIM_MANUFACTURER.IDManufacturer
where year(FACT_TRANSACTIONS.Date) = 2010
group by DIM_MANUFACTURER.Manufacturer_Name,year(FACT_TRANSACTIONS.Date))as T
where Rank =2

--9. Show the manufacturers that sold cellphone in 2010 but didn’t in 2009.
USE db_SQLCaseStudies
SELECT * FROM DIM_MANUFACTURER
SELECT * FROM DIM_MODEL
SELECT * FROM FACT_TRANSACTIONS

SELECT T1.MANUFACTURER_NAME, YEAR(T3.DATE) AS YEAR FROM DIM_MANUFACTURER T1
LEFT JOIN DIM_MODEL T2 ON T1.IDMANUFACTURER = T2.IDMANUFACTURER
LEFT JOIN FACT_TRANSACTIONS T3 ON T2.IDMODEL = T3.IDMODEL
WHERE (YEAR(T3.DATE) = '2010') AND (YEAR(T3.DATE) NOT IN ('2009'))
GROUP BY T1.MANUFACTURER_NAME, YEAR(T3.DATE)


--10. Find top 100 customers and their average spend, average quantity by each
--year. Also find the percentage of change in their spend.
USE db_SQLCaseStudies
SELECT * FROM DIM_CUSTOMER
SELECT * FROM FACT_TRANSACTIONS

SELECT TOP 100 
	YEAR(T1.DATE) AS [YEAR],
    T1.IDCustomer AS [CUSTOMER NAME],
    T1.TotalPrice AS [TOTAL AMT],
    AVG(T1.TotalPrice) AS [AVG SPEND],
    AVG(T1.QUANTITY) AS [AVG QUANTITY]
FROM FACT_TRANSACTIONS T1
INNER JOIN DIM_CUSTOMER T2 ON T1.IDCustomer = T2.IDCustomer
GROUP BY T1.DATE, T1.IDCustomer, T1.TotalPrice
ORDER BY 3 DESC
